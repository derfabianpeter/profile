stages:
  - version
  - build
  - release
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

.deployment: &deployment |
  # Setup SSH deploy keys
  which ssh-agent || ( apk add --no-cache openssh-client )
  eval $(ssh-agent -s)
  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null 2>&1
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config 
  ssh-keyscan -H ${DEPLOYMENT_TARGET} >> ~/.ssh/known_hosts
  

version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release test-git || true
    - release test-api
    - release next-version --allow-current
    - release next-version --allow-current > .next-version
    - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
    - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
    - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
    - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
  artifacts:
    paths:
    - build_info
    - .next-version
  except:
    - tags

Build:
  stage: build
  services:
  - docker:19.03.2-dind
  # remember to use specific version in your build images
  # see https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/
  image: docker:19.03.5-git 
  only:
    - master
  # fetching submodules here because usually themes are git submodules
  # see also the commented variables below
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    # the image is tagged as latest, because it is the master branch
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest

# Release new Version
Release:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - rm -f release_info
    - mv build_info release_info
    - . release_info
    - release -v
    - release changelog
    - release commit-and-tag CHANGELOG.md release_info
  only:
    - master

Deploy:
  stage: deploy
  image: tiangolo/docker-with-compose
  script: 
   - *deployment
   - DOCKER_HOST=ssh://${DEPLOYMENT_TARGET} docker-compose -f ci/docker-compose.yml -p peter-www up --remove-orphans -d
  allow_failure: false
  # deploying master only
  only:
    - master
  environment:
    name: production
  # # we tag specific runners here in our platform
  # tags:
  #   - deployment