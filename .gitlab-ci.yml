stages:
  - version
  - build
  - push
  - release
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_REGISTRY: docker.io
  CI_REGISTRY_IMAGE: index.docker.io/derfabianpeter/profile

.deployment: &deployment |
  # Setup SSH deploy keys
  which ssh-agent || ( apk add --no-cache openssh-client )
  eval $(ssh-agent -s)
  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null 2>&1
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config 
  ssh-keyscan -H ${DEPLOYMENT_TARGET} >> ~/.ssh/known_hosts
  

version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release test-git || true
    - release test-api
    - release next-version --allow-current
    - release next-version --allow-current > .next-version
    - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
    - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
    - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
    - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
  artifacts:
    paths:
    - build_info
    - .next-version
  except:
    - tags

Build:
  stage: build
  image: docker:19.03.5-git 
  services:
    - docker:19.03.5-dind
  # fetching submodules here because usually themes are git submodules
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - echo -n $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin $DOCKER_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# Release new Version
Release:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - rm -f release_info
    - mv build_info release_info
    - . release_info
    - release -v
    - release changelog
    - release commit-and-tag CHANGELOG.md release_info
  only:
    - master

Push Dockerhub:
  stage: push
  image: docker:19.03.5-git
  services:
    - docker:19.03.5-dind
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo -n $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin $DOCKER_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

# Push GitHub:
#   stage: push
#   image: registry.peter.saarland/fabian/if0:latest
#   # fetching submodules here because usually themes are git submodules
#   before_script:
#     - echo "Saving SSH Key for if0"
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - which ssh-agent || ( apk add --no-cache openssh-client )
#     - eval $(ssh-agent -s)
#     - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null 2>&1
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#     #- echo "${SSH_PRIVATE_KEY}" > $HOME/.ssh/id_rsa
#     #- chmod 0600 $HOME/.ssh/id_rsa
#     - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
#   script:
#     - 'echo "Committing"'
#     - 'if0 commit "$CI_SERVER_NAME $CI_PIPELINE_ID"'
#     - 'echo "Pushing"'
#     - 'if0 push git@github.com:derfabianpeter/profile.git'
#   only:
#     - master

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
Push tag:
  stage: push
  image: docker:19.03.5-git
  services:
    - docker:19.03.5-dind
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo -n $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin $DOCKER_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - tags

Deploy:
  stage: deploy
  image: tiangolo/docker-with-compose
  script: 
    - *deployment
    - DOCKER_HOST=ssh://${DEPLOYMENT_TARGET} docker-compose -f ci/docker-compose.yml rm -f
    - DOCKER_HOST=ssh://${DEPLOYMENT_TARGET} docker-compose -f ci/docker-compose.yml -p peter-www up --remove-orphans -d
  allow_failure: false
  only:
    - master
  environment:
    name: production
    url: https://www.peter.saarland